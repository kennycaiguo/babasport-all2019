<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!--导入属性配置可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
        resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myproject/generatorConfig.properties
        url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
        注意，两个属性只能选址一个;
        另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用-->
    <properties resource="generator.properties"></properties>



    <!--指定特定数据库的jdbc驱动jar包的位置-->
    <classPathEntry location="${jdbc.driverLocation}"/>
    <!--context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
          1，conditional：类似hierarchical；
          2，flat：所有内容（主键，blob）等全部生成在一个对象中；
          3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
          1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
          2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG-->
    <context id="default" targetRuntime="MyBatis3">

        <!--生成一对一配置-->
        <!--<plugin type="cc.bandaotixi.plugins.OneToOnePlugin"></plugin>-->

        <!--&lt;!&ndash;生成一对多配置&ndash;&gt;-->
        <!--<plugin type="cc.bandaotixi.plugins.OneToManyPlugin"></plugin>-->

        <!--<plugin type="cc.bandaotixi.plugins.BatchInsertPlugin"></plugin>-->
        <!--<plugin type="cc.bandaotixi.plugins.BatchUpdatePlugin"></plugin>-->

        <!-- 生成的pojo，将implements Serializable -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator type="">
            <property name="javaFileEncoding" value="UTF-8"/>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.userId}"
                password="${jdbc.password}">
        </jdbcConnection>


        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL 和
    			NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>


        <!-- 生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java，
    			也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下
        -->
        <javaModelGenerator targetPackage="com.itheima.core.pojo"
                            targetProject="src/main/java">

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="com.itheima.core.dao"
                         targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
                注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="com.itheima.core.dao"
                             targetProject="src/main/java" type="XMLMAPPER">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
             选择的table会生成一下文件：
             1，SQL map文件
             2，生成一个主键类；
             3，除了BLOB和主键的其他字段的类；
             4，包含BLOB的类；
             5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
             6，Mapper接口（可选）

             tableName（必要）：要生成对象的表名；
             注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                 根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                 1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                 2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                 3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                 4，否则，使用指定的大小写格式查询；
             另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
             这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

             可选：
             1，schema：数据库的schema；
             2，catalog：数据库的catalog；
             3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
             4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
             5，enableInsert（默认true）：指定是否生成insert语句；
             6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
             7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
             8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
             9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
             10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
             11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
             12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
             13，modelType：参考context元素的defaultModelType，相当于覆盖；
             14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
             15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

             注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
        -->
        <!-- 列出要生成代码的所有表，这里配置的是不生成Example文件 -->
        <table tableName="user" domainObjectName="User" schema="">
            <!--根据数据库字段名称转成驼峰写法 -->
            <!--写法问题： oracle 数据库，字段不区分大小写，数据库中全是大写，驼峰写法：设置false 字段名称在驼峰中使用下划线"_" 例如：file_name
                转为fileName -->
            <!--写法问题： mysql 数据库，字段区分大小写，驼峰写法：设置true时 字段名称正常写法 例如：fileName 转为fileName;
                设置false 则是filename -->
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MqSql" identity="true"/>
            <!-- 有对应实体的时候，把字段忽略生成 -->
            <!--<ignoreColumn column="dept" />-->

        </table>
        <table tableName="role" domainObjectName="role" schema="">
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MqSql" identity="true"/>
        </table>
        <table tableName="menu" domainObjectName="menu" schema="">
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MqSql" identity="true"/>
            <!--<oneToOne mappingTable="menu" column="id" joinColumn="pId" />-->
            <!--<oneToMany mappingTable="menu" column="id" joinColumn="id" />-->
        </table>
        <table tableName="permission" domainObjectName="permission" schema="">
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MqSql" identity="true"/>
        </table>
        <table tableName="role_menu" domainObjectName="RoleMenu" schema="" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MqSql" identity="true"/>
        </table>
        <table tableName="role_permission" domainObjectName="RolePermission" schema="" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MqSql" identity="true"/>
        </table>
        <table tableName="user_role" domainObjectName="UserRole" schema="" enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="true"/>
            <generatedKey column="id" sqlStatement="MqSql" identity="true"/>
        </table>

    </context>
</generatorConfiguration>